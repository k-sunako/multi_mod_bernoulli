#+title: ベルヌーイ数の高速アルゴリズムの実装
# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#+startup: overview
#+options: auto-id:t H:6

#+PROPERTY: header-args:python :session (concat "*python* - " (buffer-file-name))
#+PROPERTY: header-args:python+ :var cur_dir=(identity default-directory)
#+PROPERTY: header-args:python+ :eval no-export

#+begin_src elisp :exports none
  (setq-local org-babel-python-command ".venv/bin/python")
  (pyvenv-activate ".venv")
#+end_src

#+RESULTS:

* はじめに

このレポジトリは論文 [[https://arxiv.org/abs/0807.1347][A multimodular algorithm for computing Bernoulli
numbers]] を元にして、ベルヌーイ数を計算するアルゴリズムをPythonで実装し
たものである。

* 環境構築

[[https://docs.astral.sh/uv/][uv]] を利用している。

* 実行方法

コマンドラインで以下のように実行する。

#+begin_src bash :exports code
  uv run main.py 100
#+end_src

* 実行時間計測

#+begin_src python :results file :var outfile="images/time.png" :exports results
  from src.bernoulli import rational
  import matplotlib.pyplot as plt
  import time

  ns = [10, 100, 1000, 2000, 3000]
  lst_et = []
  for n in ns:
      t = time.time()
      _ = rational(n)
      et = time.time() - t
      lst_et.append(et)

  plt.plot(ns, lst_et)
  plt.title('rational(k) execution time')
  plt.ylabel('time[sec]')
  plt.xlabel('k')
  plt.savefig(outfile)
  plt.cla()

  outfile
#+end_src

#+RESULTS:
[[file:images/time.png]]

* プロファイリング

#+begin_src bash :exports both :results both verbatim
  uv run python -m cProfile -s tottime main.py 1000 | tail -n +2 | head -10
#+end_src

#+RESULTS:
#+begin_example
         1058483 function calls (1049323 primitive calls) in 0.374 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
      568    0.108    0.000    0.140    0.000 bernoulli.py:59(calc_mod)
      501    0.031    0.000    0.031    0.000 {built-in method marshal.loads}
   557347    0.027    0.000    0.027    0.000 {built-in method math.floor}
      430    0.014    0.000    0.033    0.000 assumptions.py:614(_prepare_class_assumptions)
1067/1064    0.012    0.000    0.063    0.000 {built-in method builtins.__build_class__}
#+end_example

* 参考

+ [[https://qiita.com/AkariLuminous/items/ff38ece900dd41d7178e#25-%E5%AE%9F%E8%A3%85][【internal_math編②】AtCoder Library 解読 〜Pythonでの実装まで〜 #競技プログラミング - Qiita]]
  + 原始根の実装を参考にした
