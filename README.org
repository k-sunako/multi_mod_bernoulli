#+title: ベルヌーイ数の高速アルゴリズムの実装
# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#+startup: overview
#+options: auto-id:t H:6

#+PROPERTY: header-args:python :session (concat "*python* - " (buffer-file-name))
#+PROPERTY: header-args:python+ :var cur_dir=(identity default-directory)
#+PROPERTY: header-args:python+ :eval no-export

#+begin_src elisp :exports none
  (setq-local org-babel-python-command ".venv/bin/python")
  (pyvenv-activate ".venv")
#+end_src

#+RESULTS:

* はじめに

このレポジトリは論文 [[https://arxiv.org/abs/0807.1347][A multimodular algorithm for computing Bernoulli
numbers]] を元にして、ベルヌーイ数を計算するアルゴリズムをPythonで実装し
たものである。

* 環境構築

[[https://docs.astral.sh/uv/][uv]] を利用している。

* 実行方法

コマンドラインで以下のように実行する。

#+begin_src bash :exports code
  uv run src/main.py 100
#+end_src

* 実行時間計測

#+begin_src python :results file :var outfile="images/time.png" :exports results
  from src.bernoulli import rational
  import matplotlib.pyplot as plt
  import time

  ns = [10, 100, 1000, 2000, 3000, 5000, 10000]
  lst_et = []
  for n in ns:
      t = time.time()
      _ = rational(n)
      et = time.time() - t
      lst_et.append(et)

  plt.plot(ns, lst_et)
  plt.title('rational(k) execution time')
  plt.ylabel('time[sec]')
  plt.xlabel('k')
  plt.savefig(outfile)
  plt.cla()

  outfile
#+end_src

#+RESULTS:
[[file:images/time.png]]

* プロファイリング

#+begin_src bash :exports both :results both verbatim
  uv run python -m cProfile -s tottime main.py 10000 | tail -n +2 | head -20
#+end_src

#+RESULTS:
#+begin_example
         1432348 function calls (1378836 primitive calls) in 15.568 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
 6409/265   13.926    0.002    0.034    0.000 bernoulli.py:65(calc_mod)
      2/1    0.772    0.386   14.525   14.525 bernoulli.py:84(rational)
     90/1    0.114    0.001    0.000    0.000 {method 'get' of '_queue.SimpleQueue' objects}
    83005    0.051    0.000    0.051    0.000 {built-in method builtins.pow}
25717/25487    0.040    0.000    0.040    0.000 {method 'acquire' of '_thread.lock' objects}
6409/6334    0.037    0.000    0.111    0.000 bernoulli.py:37(get_primitive_root_02)
    67217    0.035    0.000    0.075    0.000 primetest.py:599(isprime)
      510    0.032    0.000    0.032    0.000 {built-in method marshal.loads}
     8192    0.027    0.000    0.027    0.000 crt.py:61(<lambda>)
    87741    0.023    0.000    0.036    0.000 misc.py:501(as_int)
  16383/1    0.022    0.000    0.022    0.022 crt.py:51(alg10_14x)
    20368    0.021    0.000    0.112    0.000 generate.py:629(nextprime)
        2    0.020    0.010    0.020    0.010 crt.py:28(alg10_3)
 6409/265    0.019    0.000    0.045    0.000 thread.py:53(run)
57209/56781    0.019    0.000    0.045    0.000 bernoulli.py:60(<genexpr>)
#+end_example

* 参考

+ [[https://qiita.com/AkariLuminous/items/ff38ece900dd41d7178e#25-%E5%AE%9F%E8%A3%85][【internal_math編②】AtCoder Library 解読 〜Pythonでの実装まで〜 #競技プログラミング - Qiita]]
  + 原始根の実装を参考にした
